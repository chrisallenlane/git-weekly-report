#!/usr/bin/ruby
#######################################################################
# git-weekly-report - A tool for generating (git) weekly reports!
#
# Chris Lane
# chris@chris-allen-lane.com
# http://chris-allen-lane.com
# http://twitter.com/chrisallenlane
#######################################################################
require 'rubygems'
require 'date'
require 'trollop'


#######################################################################
# Menu options and program flow
#######################################################################
today = Date.today.strftime('%d %b %Y')
banner_text =<<ban
`git-weekly-report` generates commit reports on a per-project and per-user basis.

Examples:
git-weekly-report -g 'John Smith' -l ~/Desktop/ -p ./projects.rb
git-weekly-report -g 'John Smith' -l ~/Desktop/ -p ./projects.rb -s 'monday'
git-weekly-report -g 'John Smith' -l ~/Desktop/ -p ./projects.rb -s '#{today}'
ban

opts = Trollop::options do
	banner banner_text
	
	version 'Version: 2.0.0'

	opt :git_user_name,  'Your git username (as per `git config --global user.name`)',
			:type 		=> :string,
			:required	=> true

	opt :log_path,		'Directory wherein the log files should be written',
			:type 		=> :string,
			:required	=> true

	opt :project_file,	'The file containing a hash of projects',
			:type 		=> :string,
			:required   => true

	opt :since,	        'The date from which to parse the logs',
			:type 		=> :string

end
# Verify that the project file was specified
Trollop::die :project_file, 'must exist' unless File.exist?(opts[:project_file])
require opts[:project_file]


#######################################################################
# Report generation
#######################################################################
puts "Assembling logs..."

### Determine the correct date to use ###
if (!opts[:since_given]) || (opts[:since].eql? 'monday')
    # if no date was specified, locate the most recent Monday
    today       = Date.today
    modifier    = (today.wday == 0) ? 6 : today.wday - 1
    monday      = today - modifier
    target_date = monday.strftime('%b %d %Y');    
else
    # otherwise, use the specified date
    target_date = opts[:since]
end

### Assemble the logs ###
$projects.each do |project|
    # store the git log data
    logdata = `cd #{project[:repository]}; git log --author='#{opts[:git_user_name]}' --since="#{target_date}"`
    
    # if the log data isn't blank (ie, if work was done), save the file
    unless logdata == ''
        logfile = "#{opts[:log_path]}/#{project[:project_name]}.log.txt"
        log     = File.new(logfile, 'w')
        log.write(logdata)
        log.close 
    end
end

### Notify the user and quit ###
puts "Logs have been written to #{opts[:log_path]}."
